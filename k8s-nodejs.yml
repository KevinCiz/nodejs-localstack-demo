variables:
  REGISTRY_URL: 301722810093.dkr.ecr.ap-southeast-1.amazonaws.com
  IMAGE: ${IMAGE_NAME}
  CONTEXT: $CI_PROJECT_DIR
  AWS_REGION: ap-southeast-1
  AWS_ACCOUNT_ID_COLLAB: 356514288025
  DEVSECOPS_CROSS_ACCOUNT_RUNNER_IAM_ROLE_ARN: arn:aws:iam::${AWS_ACCOUNT_ID}:role/devsecops-cross-account-runner-role
  DEVSECOPS_CROSS_ACCOUNT_RUNNER_IAM_ROLE_ARN_QA: arn:aws:iam::${AWS_ACCOUNT_ID_QA}:role/devsecops-cross-account-runner-role
  DEVSECOPS_CROSS_ACCOUNT_RUNNER_IAM_ROLE_ARN_PROD: arn:aws:iam::${AWS_ACCOUNT_ID_PROD}:role/devsecops-cross-account-runner-role
  DEVSECOPS_CROSS_ACCOUNT_RUNNER_IAM_ROLE_EXTERNAL_ID: DFCOLLAB2021
  NODE_RUNTIME: nodejs18.x

# Executes as user "gitlab-runner"  (not ec2-user)
default:
    image: 207818544005.dkr.ecr.ap-southeast-1.amazonaws.com/mcc-devsecops/nodejs-18
    cache:
        key: ${CI_COMMIT_REF_SLUG}
        paths:
            - ${NODE_CACHE}
    before_script:
        - npm ci --cache .npm --prefer-offline

stages:
  - build-nodejs
  - build-image

include:
    - local: /scan/common/Sonarqube.gitlab-ci.yml
    - local: /scan/common/DependencyCheck.gitlab-ci.yml
    - local: /scan/common/Fortify.gitlab-ci.yml
    - project: df-ecs/infra/test-automation
      file: /.gitlab-ci.yml

build-nodejs:
  stage: build-nodejs
  script:
    - CREDENTIALS=`aws sts assume-role --role-arn "${DEVSECOPS_CROSS_ACCOUNT_RUNNER_IAM_ROLE_ARN}" --role-session-name RoleSession --output=json --external-id ${DEVSECOPS_CROSS_ACCOUNT_RUNNER_IAM_ROLE_EXTERNAL_ID}`
    - export AWS_ACCESS_KEY_ID=`echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId'`
    - export AWS_SECRET_ACCESS_KEY=`echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey'`
    - export AWS_SESSION_TOKEN=`echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken'`
    - export AWS_EXPIRATION=`echo ${CREDENTIALS} | jq -r '.Credentials.Expiration'`
    - aws configure set region ap-southeast-1
    - echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN AWS_EXPIRATION=$AWS_EXPIRATION" > credentials
    - node --version
    - npm --version
    - echo $CI_COMMIT_BEFORE_SHA
    # remove snapshot if release branch
    - echo ${CI_COMMIT_BRANCH}
    # create version doc
    - VERSION=$(node -e "console.log(require('./package.json').version)")
    - echo $VERSION
    - VERSION=$(node -e "console.log(require('./package.json').version)") #snapshot v2.5.1
    - echo VERSION=$VERSION > VERSION.txt
    - cat VERSION.txt
    - APP_NAME=$(node -e "console.log(require('./package.json').name)")
    # - APP_NAME=${CI_PROJECT_TITLE}
    - echo APP_NAME=$APP_NAME >> VERSION.txt
    - cat VERSION.txt
    - npm install
    - echo "build success"
  artifacts:
    paths:
      - './function.zip'
      - package.lock
      - VERSION.txt
    expire_in: 30 days
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: ($CI_COMMIT_BRANCH =~ /^release/ || $CI_COMMIT_BRANCH =~ /^dev/ || $CI_COMMIT_BRANCH =~ $CI_DEFAULT_BRANCH)

# Building image using kaniko and push into ECR
build-image:
  stage: build-image
  dependencies:
    - build-nodejs
  image: 207818544005.dkr.ecr.ap-southeast-1.amazonaws.com/mcc-devsecops/kaniko
  script:
    - $(cat credentials)
    - mkdir -p /kaniko/.docker
    - echo "{\"credHelpers\":{\"$REGISTRY_URL\":\"ecr-login\"}}" > /kaniko/.docker/config.json
    - echo $REGISTRY_URL/$IMAGE:$CI_COMMIT_SHORT_SHA
    - /kaniko/executor --context $CONTEXT --dockerfile $CI_PROJECT_DIR/src/main/docker/Dockerfile --destination $REGISTRY_URL/$IMAGE:$CI_COMMIT_SHORT_SHA
  only:
    - /^dev/release-.*$/
    - /^release/.*$/
